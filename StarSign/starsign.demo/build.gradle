/*
* This build file was auto generated by running the Gradle 'init' task
* by 'psyken' at '14. 3. 5 오후 3:46' with Gradle 1.11
*
* This generated file contains a sample Java project to get you started.
* For more details take a look at the Java Quickstart chapter in the Gradle
* user guide available at http://gradle.org/docs/1.11/userguide/tutorial_java_projects.html
*/

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'eclipse-wtp'

// JAVA Version 1.7
sourceCompatibility = 1.7

// Application Version
version = '1.0'

// use Maven Central repositories
repositories {
   mavenCentral()
}

eclipse {
	classpath {
		containers.removeAll(EclipseWtpPlugin.WEB_LIBS_CONTAINER)
		containers.removeAll("GROOVY_DSL_SUPPORT")
	}
    
    wtp {
        facet {
            facet name: 'jst.web', version: '3.0'
            facet name: 'java', version: '1.7'
            facet name: 'wst.jsdt.web', version: '1.0'
        }
    }
}

war {
	baseName = 'demostar'
	from 'src/main/webapp'
}

// dependency version information
def version = [
	spring: '3.2.2.RELEASE'
	, junit: '4.11'
	, servletApi: '3.0.1'
	, jstl: '1.2'
	, slf4j: '1.7.6'
	, mockito: '1.9.0'
	, cglib: '2.2.2'
	, logback: '1.0.6'
	, aspectjtool: '1.7.2'
]

// In this section you declare the dependencies for your production and test code
dependencies {
	compile	"org.springframework:spring-webmvc:${version.spring}",
			"org.springframework:spring-jdbc:${version.spring}",
			"cglib:cglib-nodep:${version.cglib}",
			"ch.qos.logback:logback-classic:${version.logback}",
			"org.slf4j:slf4j-api:${version.slf4j}",
			"org.aspectj:aspectjtools:${version.aspectjtool}"

	providedCompile "javax.servlet:javax.servlet-api:${version.servletApi}"

	testCompile	"org.springframework:spring-test:${version.spring}",
				"junit:junit:${version.junit}",
				"org.mockito:mockito-core:${version.mockito}"
										
	runtime "javax.servlet:jstl:${version.jstl}"
}

// exclude commons-logging for logback(slf4j)
[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')

// encoding setting when java compile
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

// unit test setting
test {
   jvmArgs = ['-ea', '-Xmx256m']
   logging.captureStandardOutput(LogLevel.INFO)
   testReport = false
}

// 프로젝트 초기화
// 1. java source directory 생성 : src/main/java, src/test/java
// 2. resource directory 생성    : src/main/resource, src/test/resource
// 3. web source directory 생성  : src/main/webapp, src/main/webapp/WEB-INF
task initProject(description: 'initialize project') << {
   createDir = {
	   println "create source directory: $it"
	   it.mkdirs()
   }
   sourceSets*.java.srcDirs*.each createDir
   sourceSets*.resources.srcDirs*.each createDir
   createDir webAppDir
   createDir new File(webAppDir, '/WEB-INF')
}

/*
buildscript {
    ext {
        springBootVersion = '1.1.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'war'

build {
	println "testaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	println "testaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	println "testaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	println "testaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	println "testaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
}

task show << {
    println relativePath(compileJava.destinationDir)
    println relativePath(processResources.destinationDir)
}


war {
    baseName = 'demo'
    version =  '0.0.1'
}
sourceCompatibility = 1.6
targetCompatibility = 1.6

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-aop")
    compile("org.springframework.boot:spring-boot-starter-web")
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")
}

eclipse {
    classpath {
    	containers.removeAll(EclipseWtpPlugin.WEB_LIBS_CONTAINER)
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task hello {
    doLast {
        println 'Hello world!'
    }
}
*/
